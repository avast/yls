{
  "fileTypes": [
    "yara",
    "yar"
  ],
  "name": "YARA",
  "scopeName": "source.yara",
  "repository": {
    "comments": {
      "name": "meta.comment.yara",
      "patterns": [
        {
          "name": "comment.line.double-slash.yara",
          "match": "//.*$"
        },
        {
          "name": "comment.block.yara",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "imports": {
      "name": "keyword.control.directive.yara",
      "begin": "\\b(import)(?=\\s+\")",
      "end": "(?<=\")",
      "patterns": [
        {"include": "#quoted-strings"}
      ]
    },
    "includes": {
      "name": "keyword.control.directive.yara",
      "begin": "\\b(include)(?=\\s+\")",
      "end": "(?<=\")",
      "patterns": [
        {"include": "#quoted-strings"}
      ]
    },
    "rules": {
      "patterns": [
        {"include": "#rule-restrictions"},
        {"include": "#rule-declaration"},
        {"include": "#rule-tags"},
        {"include": "#rule-start"},
        {"include": "#rule-meta"},
        {"include": "#rule-strings"},
        {"include": "#rule-conditions"},
        {"include": "#comments"},
        {"include": "#rule-end"}
      ]
    },
    "rule-restrictions": {
      "patterns": [
        {
          "name": "entity.name.type.restrictions.yara",
          "match": "\\b(global|private)\\b"
        }
      ]
    },
    "rule-declaration": {
      "name": "meta.function.yara",
      "begin": "\\b(rule)\\b",
      "end": "(?=[{:])",
      "beginCaptures": {
        "1": {
          "name": "storage.type.function.yara"
        }
      },
      "patterns": [
        {"include": "#reserved-identifiers"},
        {
          "name": "entity.name.function.yara",
          "match": "\\b[A-Z_a-z][0-9A-Z_a-z]{0,127}\\b"
        },
        {"include": "#unmatched-characters"}
      ]
    },
    "rule-tags": {
      "name": "entity.name.tag.yara",
      "begin": ":",
      "end": "(?=\\{)",
      "patterns": [
        {"include": "#identifiers"}
      ]
    },
    "rule-start": {
      "name": "punctuation.definition.rule.start.yara",
      "match": "\\{"
    },
    "rule-meta": {
      "begin": "\\b(meta)\\s*:",
      "end": "(?=\\b(strings|condition)\\b)",
      "beginCaptures": {
        "1": {"name": "keyword.other.meta.yara"}
      },
      "patterns": [
        {"include": "#reserved-identifiers"},
        {"include": "#comments"},
        {"include": "#meta-value-bool"},
        {"include": "#meta-value-int"},
        {"include": "#meta-value-string"},
        {"include": "#unmatched-characters"}
      ]
    },
    "meta-value-bool": {
      "name": "support.other.meta-name.strings.yara",
      "match": "\\b([A-Z_a-z][0-9A-Z_a-z]{0,127})\\s*(=)\\s*(true|false)",
      "captures": {
        "1": {"name": "entity.other.meta.identifier.yara"},
        "2": {"name": "keyword.operator.assignment.yara"},
        "3": {"name": "constant.language.yara"}
      }
    },
    "meta-value-int": {
      "name": "support.other.meta-name.strings.yara",
      "match": "\\b([A-Z_a-z][0-9A-Z_a-z]{0,127})\\s*(=)\\s*([0-9]+)(KB|MB)?",
      "captures": {
        "1": {"name": "entity.other.meta.identifier.yara"},
        "2": {"name": "keyword.operator.assignment.yara"},
        "3": {"name": "constant.numeric.yara"},
        "4": {"name": "storage.type.number.postfix.yara"}
      }
    },
    "meta-value-string": {
      "name": "support.other.meta-name.strings.yara",
      "begin": "\\b([A-Z_a-z][0-9A-Z_a-z]{0,127})\\s*(=)\\s*(?=\")",
      "end": "(?<=\")",
      "beginCaptures": {
        "1": {"name": "entity.other.meta.identifier.yara"},
        "2": {"name": "keyword.operator.assignment.yara"}
      },
      "patterns": [
        {"include": "#quoted-strings"}
      ]
    },
    "rule-strings": {
      "name": "entity.name.section.strings.yara",
      "begin": "\\b(strings)\\s*:",
      "end": "(?=\\b(condition)\\b)",
      "beginCaptures": {
        "1": {"name": "keyword.other.strings.yara"}
      },
      "patterns": [
        {"include": "#reserved-identifiers"},
        {"include": "#comments"},
        {"include": "#string-assignment-text"},
        {"include": "#string-assignment-regex"},
        {"include": "#string-assignment-hex"},
        {"include": "#unmatched-characters"}
      ]
    },
    "string-assignment-text": {
      "name": "support.other.attribute-name.strings.yara",
      "begin": "(\\$)([0-9A-Z_a-z]+\\b)?+\\s*+([^\\n\\s=][^=]*)?(=)(?=\\s*\")",
      "end": "(?=\\b(condition)\\b|\\$)",
      "beginCaptures": {
        "1": {"name": "variable.language.string.identifier.yara"},
        "2": {"name": "variable.other.string.identifier.yara"},
        "3": {"name": "invalid.illegal.string.identifier.yara"},
        "4": {"name": "keyword.operator.assignment.yara"}
      },
      "patterns": [
        {"include": "#comments"},
        {"include": "#text-strings"},
        {"include": "#reserved-identifiers"},
        {"include": "#unmatched-characters"}
      ]
    },
    "string-assignment-regex": {
      "name": "support.other.attribute-name.strings.yara",
      "begin": "(\\$)([0-9A-Z_a-z]+\\b)?+\\s*+([^\\n\\s=][^=]*)?(=)(?=\\s*/)",
      "end": "(?=\\b(condition)\\b|\\$)",
      "beginCaptures": {
        "1": {"name": "variable.language.string.identifier.yara"},
        "2": {"name": "variable.other.string.identifier.yara"},
        "3": {"name": "invalid.illegal.string.identifier.yara"},
        "4": {"name": "keyword.operator.assignment.yara"}
      },
      "patterns": [
        {"include": "#comments"},
        {"include": "#regexp-strings"},
        {
          "name": "keyword.other.modifier.yara",
          "match": "\\b(nocase|wide|ascii|fullword|private)\\b"
        },
        {"include": "#reserved-identifiers"},
        {"include": "#unmatched-characters"}
      ]
    },
    "string-assignment-hex": {
      "name": "support.other.attribute-name.strings.yara",
      "begin": "(\\$)([0-9A-Z_a-z]+\\b)?+\\s*+([^\\n\\s=][^=]*)?(=)",
      "end": "(?=\\b(condition)\\b|\\$)",
      "beginCaptures": {
        "1": {"name": "variable.language.string.identifier.yara"},
        "2": {"name": "variable.other.string.identifier.yara"},
        "3": {"name": "invalid.illegal.string.identifier.yara"},
        "4": {"name": "keyword.operator.assignment.yara"}
      },
      "patterns": [
        {"include": "#comments"},
        {"include": "#hex-string-value"},
        {
          "name": "keyword.other.modifier.yara",
          "match": "\\b(private)\\b"
        },
        {"include": "#reserved-identifiers"},
        {"include": "#unmatched-characters"}
      ]
    },
    "hex-string-value": {
      "contentName": "entity.name.hex.yara",
      "begin": "\\{",
      "end": "\\}|(?=[^?0-9A-Fa-f\\[\\-\\]()/\\s\\n])(.*)",
      "endCaptures": {
        "1": {"name": "invalid.illegal.newline.yara"}
      },
      "patterns": [
        {"include": "#comments"},
        {"include": "#hex-jump"},
        {"include": "#hex-values"},
        {"include": "#hex-alternate-values"},
        {"include": "#unmatched-characters"}
      ]
    },
    "hex-alternate-values": {
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        {"include": "#hex-values"},
        {
          "name": "entity.other.special.pipe.hex.yara",
          "match": "\\|"
        },
        {"include": "#hex-alternate-values"},
        {"include": "#unmatched-characters"}
      ]
    },
    "hex-values": {
      "contentName": "string.other.hex.yara",
      "begin": "(?=[0-9?A-Fa-f])",
      "end": "(?=[\\s\\[()}/|])",
      "patterns": [
        {
          "name": "invalid.illegal.hex.missingchar.yara",
          "match": "(?<![0-9?A-Fa-f])[0-9?A-Fa-f]([0-9?A-Fa-f]{2})*(?![0-9?A-Fa-f])"
        },
        {
          "name": "string.other.hex.yara",
          "match": "[0-9A-Fa-f]"
        },
        {
          "name": "constant.other.placeholder.hex.yara",
          "match": "\\?"
        },
        {"include": "#unmatched-characters"}
      ]
    },
    "hex-jump": {
      "name": "entity.name.jump.hex.yara",
      "begin": "\\[\\s*(?=([1-9][0-9]*|[0-9]*\\s*-|[0-9]+\\s*-\\s*[0-9]*)\\s*\\])",
      "end": "\\]",
      "patterns": [
        {
          "name": "constant.numeric.jump.hex.yara",
          "match": "[0-9]"
        },
        {
          "name": "entity.other.dash.jump.hex.yara",
          "match": "-"
        },
        {"include": "#unmatched-characters"}
      ]
    },
    "xor-modifier": {
      "match": "\\b(xor)\\s*(\\()\\s*(0x[0-9A-Fa-f]{1,2}|0o[0-7]{1,3}|[0-9]{1,3})(?:\\s*(-)\\s*(0x[0-9A-Fa-f]{1,2}|0o[0-7]{1,3}|[0-9]{1,3}))?\\s*(\\))",
      "captures": {
        "1": {"name": "keyword.other.modifier.yara"},
        "2": {"name": "punctuation.parenthesis.begin.yara"},
        "3": {"name": "constant.numeric.yara"},
        "4": {"name": "constant.character.hyphen.yara"},
        "5": {"name": "constant.numeric.yara"},
        "6": {"name": "punctuation.parenthesis.end.yara"}
      }
    },
    "base64-modifier": {
      "begin": "\\b(base64)\\s*(\\()(?=\\s*\")",
      "end": "(\\))",
      "beginCaptures": {
        "1": {"name": "keyword.other.modifier.yara"},
        "2": {"name": "punctuation.parenthesis.begin.yara"}
      },
      "endCaptures": {
        "1": {"name": "punctuation.parenthesis.end.yara"}
      },
      "patterns": [
        {"include": "#quoted-strings-64"},
        {"include": "#unmatched-characters"}
      ]
    },
    "text-strings": {
      "patterns": [
        {"include": "#quoted-strings"},
        {"include": "#xor-modifier"},
        {"include": "#base64-modifier"},
        {
          "name": "keyword.other.modifier.yara",
          "match": "\\b(nocase|wide|ascii|xor|base64|base64wide|fullword|private)\\b(?!\\()"
        },
        {"include": "#comments"},
        {"include": "#unmatched-characters"}
      ]
    },
    "rule-conditions": {
      "name": "entity.name.section.condition.yara",
      "begin": "\\b(condition)\\s*:",
      "end": "(?=\\})",
      "beginCaptures": {
        "1": {"name": "keyword.other.condition.yara"}
      },
      "patterns": [
        {"include": "#comments"},
        {"include": "#condition-expression"},
        {"include": "#reserved-identifiers"},
        {"include": "#unmatched-characters"}
      ]
    },
    "condition-expression": {
      "patterns": [
        {"include": "#comments"},
        {"include": "#condition-nested-expression"},
        {"include": "#boolean-operators"},
        {"include": "#struct-member-access"},
        {"include": "#array-subscripting"},
        {"include": "#relational-operators"},
        {"include": "#relational-operators-text"},
        {"include": "#relational-operators-regexp"},
        {"include": "#arithmetic-unary-operators"},
        {"include": "#arithmetic-operators"},
        {"include": "#bitwise-unary-operators"},
        {"include": "#bitwise-operators"},
        {"include": "#regexp-strings"},
        {"include": "#quoted-strings"},
        {"include": "#numbers"},
        {"include": "#separator"},
        {"include": "#range-operator"},
        {"include": "#string-identifiers"},
        {"include": "#booleans"},
        {
          "name": "constant.numeric.keyword.yara",
          "match": "\\b(all|any|none|filesize)\\b"
        },
        {
          "name": "constant.numeric.keyword.yara invalid.deprecated.keyword.yara",
          "match": "\\b(entrypoint)\\b"
        },
        {
          "name": "variable.language.string.identifier.wildcard.yara",
          "match": "\\b(them)\\b"
        },
        {
          "name": "keyword.other.yara",
          "match": "\\b(at|for|in|of)\\b"
        },
        {
          "name": "support.function.other.yara",
          "match": "\\b((?:u?int)(?:8|16|32)(?:be)?)(?=\\s*(\\(|\n))"
        },
        {
          "name": "variable.language.loop.variable.yara",
          "match": "([!@#$])(?![0-9A-Z_a-z])"
        },
        {"include": "#identifiers"},
        {"include": "#unmatched-characters"}
      ]
    },
    "condition-nested-expression": {
      "begin": "(:\\s*)?\\(",
      "end": "\\)",
      "patterns": [
        {"include": "#condition-expression"}
      ]
    },
    "struct-member-access": {
      "name": "meta.struct.access.yara",
      "match": "(?!<\\.\\s*)\\.\\s*(?!\\.)"
    },
    "array-subscripting": {
      "name": "punctuation.definition.array.access.yara",
      "match": "(\\[|\\])"
    },
    "separator": {
      "name": "punctuation.separator.arguments.yara",
      "match": ","
    },
    "range-operator": {
      "name": "keyword.operator.range.yara",
      "match": "(?<!\\.)\\.\\.(?!\\.)"
    },
    "boolean-operators": {
      "name": "keyword.operator.logical.yara",
      "match": "\\b(not|defined|and|or)\\b"
    },
    "relational-operators": {
      "name": "keyword.operator.comparison.yara",
      "match": "(?<=[0-9A-Z_a-z()\\[\\]\\s]|^)(>=?|<=?|==|!=)(?=[-0-9A-Z_a-z()\\s]|[!@#$]|$)"
    },
    "arithmetic-operators": {
      "name": "keyword.operator.arithmetic.yara",
      "match": "(?<=[0-9A-Z_a-z()\\[\\]\\s]|^)([+*\\\\%])(?=[-0-9A-Z_a-z()\\s]|[!@#$]|$)"
    },
    "arithmetic-unary-operators": {
      "name": "keyword.operator.arithmetic.yara",
      "match": "(?<=[0-9A-Z_a-z()\\[\\]\\s]|^)(-)(?=[-0-9A-Z_a-z()\\s]|[!@#$]|$)"
    },
    "bitwise-operators": {
      "name": "keyword.operator.bitwise.yara",
      "match": "(?<=[0-9A-Z_a-z()\\[\\]\\s]|^)([&|^]|<<|>>)(?=[-0-9A-Z_a-z()\\s]|[!@#$]|$)"
    },
    "bitwise-unary-operators": {
      "name": "keyword.operator.bitwise.yara",
      "match": "(?<=[0-9A-Z_a-z()\\[\\]\\s]|^)(~)(?=[-0-9A-Z_a-z()\\s]|[!@#$]|$)"
    },
    "relational-operators-text": {
      "name": "keyword.operator.comparison.yara",
      "match": "\\b(contains|icontains|startswith|istartswith|endswith|iendswith|iequals)(?=\\s*\")"
    },
    "relational-operators-regexp": {
      "name": "keyword.operator.comparison.yara",
      "match": "\\b(matches)(?=\\s*/)"
    },
    "rule-end": {
      "name": "punctuation.definition.rule.end.yara",
      "match": "\\}"
    },
    "identifiers": {
      "name": "variable.other.identifier.yara",
      "patterns": [
        {
          "include": "#reserved-identifiers"
        },
        {
          "name": "variable.other.identifier.yara",
          "match": "\\b[A-Z_a-z][0-9A-Z_a-z]{0,127}\\b"
        },
        {"include": "#unmatched-characters"}
      ]
    },
    "string-identifiers": {
      "name": "variable.other.string_identifier.yara",
      "match": "([!@#$])([0-9A-Z_a-z]+|(?=[*]))([*]?)",
      "captures": {
        "1": {"name": "variable.language.string.identifier.yara"},
        "2": {"name": "variable.other.string.identifier.yara"},
        "3": {"name": "string.interpolated.string.identifier.yara"}
      }
    },
    "regexp-strings": {
      "name": "string.regexp.yara",
      "begin": "(?<!/)(/)(?!/|\\n)",
      "end": "(?<!\\\\)(/)(i?s?)|((?:\\\\/)?[^/]*\\n)",
      "beginCaptures": {
        "1": {"name": "punctuation.definition.regexp.begin.yara"}
      },
      "endCaptures": {
        "1": {"name": "punctuation.definition.regexp.end.yara"},
        "2": {"name": "storage.modifier.flag.regexp"},
        "3": {"name": "invalid.illegal.newline.yara"}
      },
      "patterns": [
        {"include": "#regexp-expression"}
      ]
    },
    "regexp-expression": {
      "patterns": [
        {
          "include": "#regexp-parentheses"
        },
        {
          "include": "#regexp-character-set"
        },
        {
          "include": "#regexp-base-expression"
        },
        {
          "name": "invalid.illegal.regexp.end.yara",
          "match": "/"
        }
      ]
    },
    "regexp-base-expression": {
      "patterns": [
        {
          "name": "support.other.match.any.regexp",
          "match": "\\."
        },
        {
          "name": "support.other.match.begin.regexp",
          "match": "\\^"
        },
        {
          "name": "support.other.match.end.regexp",
          "match": "\\$"
        },
        {
          "name": "keyword.operator.quantifier.regexp",
          "match": "[+*?]\\??"
        },
        {
          "name": "keyword.operator.disjunction.regexp",
          "match": "\\|"
        },
        {
          "name": "keyword.operator.quantifier.regexp",
          "match": "\\{([0-9]+|[0-9]+,(?:[0-9]+)?|,[0-9]+)\\}",
          "captures": {
            "1": {"name": "constant.numeric.yara"}
          }
        },
        {
          "include": "#regexp-escape-sequence"
        },
        {
          "name": "string.regexp.yara",
          "match": "[\\x20!\"#%&+,\\-'0->@-Z\\\\_`a-z{}~]"
        },
        {
          "include": "#unmatched-characters"
        }
      ]
    },
    "regexp-character-set": {
      "patterns": [
        {
          "match": "\\[\\^?\\](?!.*?\\])"
        },
        {
          "name": "meta.character.set.regexp",
          "begin": "(\\[)(\\^)?(\\])?",
          "end": "(\\]|(?=/))|([^\\]]*?(?=/|\\n))",
          "beginCaptures": {
            "1": {
              "name": "constant.other.set.regexp punctuation.character.set.begin.regexp"
            },
            "2": {
              "name": "keyword.operator.negation.regexp"
            },
            "3": {
              "name": "constant.character.set.regexp"
            }
          },
          "endCaptures": {
            "1": {
              "name": "constant.other.set.regexp punctuation.character.set.end.regexp"
            },
            "2": {
              "name": "invalid.illegal.newline.yara"
            }
          },
          "patterns": [
            {
              "include": "#regexp-character-set-escapes"
            },
            {
              "name": "constant.character.set.regexp",
              "match": "[\\x20\\x21\\x23-\\x2E\\x30-\\x7E]"
            }
          ]
        }
      ]
    },
    "regexp-character-set-escapes": {
      "patterns": [
        {
          "name": "constant.character.escape.regexp",
          "match": "\\\\[.afnrt\\\\]"
        },
        {
          "match": "(\\\\x[0-9A-Fa-f]{2})|(\\\\x.{2})",
          "captures": {
            "1": {"name": "constant.character.escape.regexp"},
            "2": {"name": "invalid.illegal.character.escape.regex"}
          }
        }
      ]
    },
    "regexp-escape-sequence": {
      "patterns": [
        {
          "name": "constant.character.escape.regexp",
          "match": "\\\\[.afnrt\\\\]"
        },
        {
          "match": "(\\\\x[0-9A-Fa-f]{2})|(\\\\x.{2})",
          "captures": {
            "1": {"name": "constant.character.escape.regexp"},
            "2": {"name": "invalid.illegal.character.escape.regex"}
          }
        },
        {
          "name": "constant.character.class.regexp",
          "match": "\\\\([wWsSdD])"
        },
        {
          "name": "constant.character.assertion.regexp",
          "match": "\\\\([bB])"
        },
        {
          "name": "constant.character.escape.regexp",
          "match": "\\\\(.)"
        }
      ]
    },
    "regexp-parentheses": {
      "begin": "(\\()([+*?])?",
      "end": "(\\)|(?=/))|([^\\)]*?(?=/|\\n))",
      "beginCaptures": {
        "1": {"name": "punctuation.parenthesis.begin.regexp support.other.parenthesis.regexp"},
        "2": {"name": "invalid.illegal.group.construct.regexp"}
        },
      "endCaptures": {
        "1": {"name": "punctuation.parenthesis.end.regexp support.other.parenthesis.regexp"},
        "2": {"name": "invalid.illegal.newline.yara"}
      },
      "patterns": [
        {"include": "#regexp-expression"}
      ]
    },
    "quoted-strings": {
      "name": "string.quoted.double.yara",
      "begin": "(?<!\")(\")(?!\\n)",
      "end": "(\")|((?:\\\\\")?[^\"]*\\n)",
      "beginCaptures": {
        "1": {"name": "punctuation.definition.string.begin.yara"}
      },
      "endCaptures": {
        "1": {"name": "punctuation.definition.string.end.yara"},
        "2": {"name": "invalid.illegal.newline.yara"}
      },
      "patterns": [
        {
          "name": "constant.character.escape.yara",
          "match": "\\\\([nrt\\\\\"]|x[0-9A-Fa-f]{2})"
        },
        {
          "name": "string.quoted.double.ascii.yara",
          "match": "[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]"
        },
        {
          "name": "string.quoted.double.unicode.yara",
          "match": "[^\\x00-\\x7F]"
        },
        {
          "name": "invalid.illegal.character.yara",
          "match": "[\"\\\\\\n\\r]"
        }
      ]
    },
    "quoted-strings-64": {
      "name": "string.quoted.double.yara",
      "begin": "(\")(?=(\\\\([nrt\\\\\"]|x[0-9A-Fa-f]{2})|[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]){64}\")",
      "end": "(\")|(\\n)",
      "beginCaptures": {
        "1": {"name": "punctuation.definition.string.begin.yara"},
        "2": {"name": "invalid.illegal.character.length.yara"}
      },
      "endCaptures": {
        "1": {"name": "punctuation.definition.string.end.yara"},
        "2": {"name": "invalid.illegal.newline.yara"}
      },
      "patterns": [
        {
          "name": "constant.character.escape.yara",
          "match": "\\\\([nrt\\\\\"]|x[0-9A-Fa-f]{2})"
        },
        {
          "name": "string.double.quoted.ascii.yara",
          "match": "[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]"
        }
      ]
    },
    "integers": {
      "patterns": [
        {
          "name":"constant.numeric.dec.yara",
          "match": "\\b[0-9]+(KB|MB)?\\b",
          "captures": {
            "1": {"name": "storage.type.number.postfix.yara"}
          }
        },
        {
          "name":"constant.numeric.hex.yara",
          "match": "\\b(0x)[0-9A-Fa-f]+\\b",
          "captures": {
            "1": {"name": "storage.modifier.number.yara"}
          }
        },
        {
          "name":"constant.numeric.oct.yara",
          "match": "\\b(0o)([0-7]+)\\b",
          "captures": {
            "1": {"name": "storage.type.number.yara"}
          }
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.yara",
          "match": "\\b([0-9]+\\.[0-9]+)\\b"
        },
        {"include": "#integers"}
      ]
    },
    "booleans": {
      "name": "constant.language.yara",
      "match": "\\b(false|true)\\b"
    },
    "reserved-identifiers": {
      "name": "invalid.illegal.identifier.yara",
      "match": "\\b(all|and|any|ascii|at|base64|base64wide|condition|contains|endswith|entrypoint|false|filesize|for|fullword|global|import|icontains|iendswith|iequals|in|include|int16|int16be|int32|int32be|int8|int8be|istartswith|matches|meta|nocase|none|not|of|or|private|rule|startswith|strings|them|true|uint16|uint16be|uint32|uint32be|uint8|uint8be|wide|xor|defined)\\b"
    },
    "unmatched-characters": {
      "name": "invalid.illegal.character.yara",
      "match": "\\S"
    }
  },
  "patterns": [
    {
      "include": "#includes"
    },
    {
      "include": "#imports"
    },
    {
      "include": "#rules"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#unmatched-characters"
    }
  ],
  "smartTypingPairs": [
    [ "\"", "\"" ],
    [ "/", "/" ],
    [ "(", ")" ],
    [ "{", "}" ],
    [ "[", "]" ],
    [ "/*", "*/" ]
  ],
  "highlightPairs": [
    [ "\"", "\"" ],
    [ "/", "/" ],
    [ "(", ")" ],
    [ "{", "}" ],
    [ "[", "]" ]
  ]
}
